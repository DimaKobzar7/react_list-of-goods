{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","alpabetSort","setState","ALPABET","lengthSort","LENGTH","reversSort","resetSort","this","renderItems","goods","visibleGoods","sort","a","b","localeCompare","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,+FAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,SAAUL,EAASM,MAHvB,EAMEC,YAAc,WACZ,EAAKC,SAAS,CAAEH,SAAUL,EAASS,WAPvC,EAUEC,WAAa,WACX,EAAKF,SAAS,CAAEH,SAAUL,EAASW,UAXvC,EAcEC,WAAa,WACX,EAAKJ,UAAS,SAAAL,GAAK,MAAK,CAAEC,YAAaD,EAAMC,gBAfjD,EAkBES,UAAY,WACV,EAAKL,SAAS,CAAEJ,YAAY,EAAOC,SAAUL,EAASM,QAnB1D,4CAsBE,WACE,MAAiCQ,KAAKX,MAA9BE,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,WACZW,EAvDH,SACLC,EADK,GAGJ,IADCX,EACF,EADEA,SAAUD,EACZ,EADYA,WAENa,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQf,GACN,KAAKL,EAASS,QACZ,OAAOU,EAAEE,cAAcD,GAEzB,KAAKpB,EAASW,OACZ,OAAOQ,EAAEG,OAASF,EAAEE,OAEtB,QACE,OAAO,MAITlB,GACFa,EAAaM,UAGRN,EAgCeO,CAClBvB,EACA,CAAEI,WAAUD,eAGd,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYtB,IAAaL,EAASS,UAEpCmB,QAASd,KAAKP,YALhB,iCAUA,wBACEmB,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYtB,IAAaL,EAASW,SAEpCiB,QAASd,KAAKJ,WALhB,4BAUA,wBACEgB,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAavB,IAEfwB,QAASd,KAAKF,WALhB,qBASCP,IAAaL,EAASM,MAAQF,EAE3B,wBACEsB,KAAK,SACLD,UAAU,4BACVG,QAASd,KAAKD,UAHhB,mBAOE,MAER,6BACGE,EAAYc,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,eA1EpC,GAAyBC,aCzDzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ee31e863.chunk.js","sourcesContent":["import { Component } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  alpabetSort = () => {\n    this.setState({ sortType: SortType.ALPABET });\n  };\n\n  lengthSort = () => {\n    this.setState({ sortType: SortType.LENGTH });\n  };\n\n  reversSort = () => {\n    this.setState(state => ({ isReversed: !state.isReversed }));\n  };\n\n  resetSort = () => {\n    this.setState({ isReversed: false, sortType: SortType.NONE });\n  };\n\n  render() {\n    const { sortType, isReversed } = this.state;\n    const renderItems = getReorderedGoods(\n      goodsFromServer,\n      { sortType, isReversed },\n    );\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames('button is-info', {\n              'is-light': sortType !== SortType.ALPABET,\n            })}\n            onClick={this.alpabetSort}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-success', {\n              'is-light': sortType !== SortType.LENGTH,\n            })}\n            onClick={this.lengthSort}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-warning', {\n              'is-light': !isReversed,\n            })}\n            onClick={this.reversSort}\n          >\n            Reverse\n          </button>\n          {sortType !== SortType.NONE || isReversed\n            ? (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={this.resetSort}\n              >\n                Reset\n              </button>\n            ) : ''}\n        </div>\n        <ul>\n          {renderItems.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// import { Component } from 'react';\n// import classNames from 'classnames';\n// import 'bulma/css/bulma.css';\n// import './App.scss';\n\n// export const goodsFromServer = [\n//   'Dumplings',\n//   'Carrot',\n//   'Eggs',\n//   'Ice cream',\n//   'Apple',\n//   'Bread',\n//   'Fish',\n//   'Honey',\n//   'Jam',\n//   'Garlic',\n// ];\n\n// enum SortType {\n//   NONE,\n//   ALPABET,\n//   LENGTH,\n// }\n\n// type ReorderOptions = {\n//   sortType: SortType,\n//   isReversed: boolean,\n// };\n\n// // Use this function in the render to prepare goods\n// export function getReorderedGoods(\n//   goods: string[],\n//   { sortType, isReversed }: ReorderOptions,\n// ) {\n//   // To avoid the original array mutation\n//   const visibleGoods = [...goods];\n\n//   // Sort and reverse goods if needed\n//   // eslint-disable-next-line no-console\n//   // console.log(sortType, isReversed);\n\n//   // console.log(sortType);\n\n//   visibleGoods.sort((a, b) => {\n//     switch (sortType) {\n//       case SortType.ALPABET:\n//         return a.localeCompare(b);\n\n//       case SortType.LENGTH:\n//         return a.length - b.length;\n\n//       default:\n//         return 0;\n//     }\n//   });\n//   //   if (sortType === SortType.ALPABET) {\n//   //     return a.localeCompare(b);\n//   //   }\n\n//   //   if (sortType === SortType.LENGTH) {\n//   //     return a.length - b.length;\n//   //   }\n\n//   //   return 0;\n//   // });\n\n//   if (isReversed) {\n//     visibleGoods.reverse();\n//   }\n\n//   return visibleGoods;\n// }\n\n// // console.log(getReorderedGoods(goodsFromServer, { sortType: 'LENGTH', isReversed: false }));\n// // console.log(getReorderedGoods(goodsFromServer, { sortType: 'LENGTH', isReversed: false }));\n\n// // DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\n// export class App extends Component<{}, State> {\n//   state = {\n//     isReversed: false,\n//     // тут запутался так как не понял что SortType то отсылка к енаму и мы через точку\n//     // обращаемся к значениям которые есть нужными мне строками\n//     sortType: SortType.NONE,\n//   };\n\n//   alpabetSort = () => {\n//     // console.log(\"object\");\n//     this.setState({ sortType: SortType.ALPABET });\n//   };\n\n//   lengthSort = () => {\n//     // console.log(\"object\");\n//     this.setState({ sortType: SortType.LENGTH });\n//   };\n\n//   reversSort = () => {\n//     this.setState(state => ({ isReversed: !state.isReversed }));\n//   };\n\n//   resetSort = () => {\n//     this.setState({ isReversed: false, sortType: SortType.NONE });\n//   };\n\n//   render() {\n//     const { sortType, isReversed } = this.state;\n\n//     // я тут в начале  поставил SortType.NONE так как я его в стейт поставил\n//     // а потом через методы что привязаны к кнопкам я его буду менять\n//     // так что по умолчанию SortType.NONE летит в функцию но через методы это буде менятся\n//     const renderItems = getReorderedGoods(\n//       goodsFromServer,\n//       { sortType, isReversed },\n//     );\n\n//     return (\n//       <div className=\"section content\">\n//         <div className=\"buttons\">\n//           <button\n//             type=\"button\"\n//             className={classNames('button is-info', {\n//               'is-light': sortType !== SortType.ALPABET,\n//             })}\n//             onClick={this.alpabetSort}\n//           >\n//             Sort alphabetically\n//           </button>\n\n//           <button\n//             type=\"button\"\n//             className={classNames('button is-success', {\n//               'is-light': sortType !== SortType.LENGTH,\n//             })}\n//             onClick={this.lengthSort}\n//           >\n//             Sort by length\n//           </button>\n\n//           <button\n//             type=\"button\"\n//             className={classNames('button is-warning', {\n//               'is-light': !isReversed,\n//             })}\n//             onClick={this.reversSort}\n//           >\n//             Reverse\n//           </button>\n//           {sortType !== SortType.NONE || isReversed\n//             ? (\n//               <button\n//                 type=\"button\"\n//                 className=\"button is-danger is-light\"\n//                 onClick={this.resetSort}\n//               >\n//                 Reset\n//               </button>\n//             ) : ''}\n//         </div>\n//         <ul>\n//           {renderItems.map(good => (\n//             <li data-cy=\"Good\" key={good}>\n//               {good}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}